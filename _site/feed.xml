<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xdotzv</title>
    <description>A simple blog.
</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 06 Jun 2016 03:24:07 +0800</pubDate>
    <lastBuildDate>Mon, 06 Jun 2016 03:24:07 +0800</lastBuildDate>
    <generator>Jekyll v3.0.5</generator>
    
      <item>
        <title>C++ 从右值引用说起</title>
        <description>&lt;p&gt;右值引用是C++11引入的新特性, 主要是为了解决两个问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;移动语义（Move Semantic）&lt;/li&gt;
  &lt;li&gt;完美转发（Perfect Forwarding）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section&quot;&gt;移动语义&lt;/h4&gt;

&lt;h4 id=&quot;section-1&quot;&gt;完美转发&lt;/h4&gt;

&lt;p&gt;其实谈右值引用的文章蛮多了，这里就主要谈谈如何区别各种类型的变量。&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Jun 2016 00:00:00 +0800</pubDate>
        <link>/2016/06/06/rvalue.html</link>
        <guid isPermaLink="true">/2016/06/06/rvalue.html</guid>
        
        
      </item>
    
      <item>
        <title>C++ 返回值优化</title>
        <description>&lt;p&gt;先看一段C++代码。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;struct C {
  C() {}
  C(const C&amp;amp;) { std::cout &amp;lt;&amp;lt; &quot;A copy was made.&quot; &amp;lt;&amp;lt; endl; }
};

C f() {
  return C();
}

int main() {
  cout &amp;lt;&amp;lt; &quot;hello world&quot; &amp;lt;&amp;lt; endl;
  C obj = f();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码会输出什么？在一个月之前，我肯定会说它调用了两次拷贝构造函数，输出如下内容。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello world
A copy was made. 
A copy was made. 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;并且还颇为得意自己很懂C++。事实证明C++这个坑原比我想象的大。&lt;/p&gt;

&lt;p&gt;绝大多数的现代编译器编译出来的程序，最后都只会输出hello wordl，不会调用拷贝构造函数。我们很容易看出来，拷贝构造函数在上面的函数中都是不必要的，因为原来生成的都是临时对象，在拷贝完成后就直接没用了。现代编译器通常在这里会进行返回值优化(Return Value Optimization)，不通过拷贝，而是在需要返回值的地方&lt;strong&gt;直接构造&lt;/strong&gt;。C++标准允许了编译器这样做，即使某些拷贝构造函数是有side-effects。&lt;/p&gt;

&lt;h3 id=&quot;named-return-value-optimization&quot;&gt;Named Return Value Optimization&lt;/h3&gt;

&lt;p&gt;在我知道了上述事实后，我写代码使用过类似下图的方式来试图让编译器进行返回值优化。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;Foo fun(){
  Foo ret;
  /* ... */
  return std::move(ret);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但实际上又是自作聪明了，编译器对于返回一个函数内的局部对象也会进行优化。同样也是当构造局部对象时，在需要返回值的地址那里&lt;strong&gt;直接进行构造&lt;/strong&gt;。这种类型的优化被称作NRVO, “named return value optimization”。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;参考&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://en.cppreference.com/w/cpp/language/copy_elision&quot;&gt;http://en.cppreference.com/w/cpp/language/copy_elision&lt;/a&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/12953127/what-are-copy-elision-and-return-value-optimization&quot;&gt;http://stackoverflow.com/questions/12953127/what-are-copy-elision-and-return-value-optimization&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 18 May 2016 00:00:00 +0800</pubDate>
        <link>/2016/05/18/return-value-optimization.html</link>
        <guid isPermaLink="true">/2016/05/18/return-value-optimization.html</guid>
        
        
      </item>
    
  </channel>
</rss>
